{{ define "upstream" }}
        {{ if .Address }}
            {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
            {{ if and .Container.Node.ID .Address.HostPort }}
                # {{ .Container.Node.Name }}/{{ .Container.Name }}
                server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
            {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
            {{ else }}
                # {{ .Container.Name }}
                server {{ .Address.IP }}:{{ .Address.Port }};
            {{ end }}
        {{ end }}
{{ end }}



{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
{{ end }}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 443 ssl http2;
        access_log /var/log/nginx/access.log vhost;
        return 503;

        ssl_certificate /etc/nginx/certs/default.crt;
        ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
{{ $containerCount := len $containers }}
{{ if eq $containerCount 1 }}
    {{ range $container := $containers }}
            {{ $addrLen := len $container.Addresses }}
            {{/* If only 1 port exposed, use that */}}
            {{ if eq $addrLen 1 }}
                {{ $address := index $container.Addresses 0 }}
                {{ template "upstream" (dict "Container" $container "Address" $address) }}
            {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
            {{ else }}
                {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
                {{ $address := where $container.Addresses "Port" $port | first }}
                {{ template "upstream" (dict "Container" $container "Address" $address) }}
            {{ end }}
    {{ end }}
{{ else }}
    ##
    # Too many containers use the same VIRTUAL_HOST
    ##
    server 127.0.0.1:10501;
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

##
# Start: {{ $host }}
##
server {
        server_name {{ $host }};
        listen 80 {{ $default_server }};
        access_log /var/log/nginx/access.log vhost;
        return 301 https://$host$request_uri;
}

server {
        server_name {{ $host }};
        listen 443 ssl http2 {{ $default_server }};
        access_log /var/log/nginx/access.log vhost;

        include ssl-settings.conf;

        ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
        ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

        location / {
            proxy_pass {{ trim $proto }}://{{ trim $host }};
        }
}
{{ else }}

server {
        server_name {{ $host }};
        listen 80 {{ $default_server }};
        access_log /var/log/nginx/access.log vhost;

        location / {
            proxy_pass {{ trim $proto }}://{{ trim $host }};
        }
}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
        server_name {{ $host }};
        listen 443 ssl http2 {{ $default_server }};
        access_log /var/log/nginx/access.log vhost;
        return 503;

        ssl_certificate /etc/nginx/certs/default.crt;
        ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ end }}
{{ end }}
